/** 
 * Document
 * Page
 * Processor
 * - CPUProcessor
 * - GPUProcessor
 * Camera
 * Demo
 * Main
 * Networks
 */ 

class Document {

private:
	Page current;
	Page previous;

public: 

	"""Initiate identifiers"""
	Document();

	"""Returns true if an e-book version of the document is available online"""
	bool EBookVersionExistOnline();
	
	"""Returns true if a page in the document as been flipped"""
	bool hasFlipped(Page page1, Page page2);

	"""Store page temporarily"""
	void storeFlippedPage(Page page));
	
	"""Delete previously stored image(s)"""
	void deleteCache();

	"""If eBook exists, download specified page from ebook"""
	Page downloadPageFromOnline(String sampleText);

	"""If eBook exists, download eBook"""
	void downloadEBook();

	"""Returns true if the ebook has been downloaded"""
	bool EBookHasBeenDownloaded(String sampleText);

	"""If eBook has already been downloaded"""
	Page extractPageFromDownloadedEBook(String sampleText);
}

class Page {
	Processor processor;
public:

	"""Initiate identifiers"""
	Page();

	"""Displays the image after rotation"""
	void displayAfterRotation();

	"""To rotate the image to compensate for skewing"""
	void deskewImage(Mat img, double angle, Mat &rotated);

	"""Handles phase 1 of image processing - applying morphological operations"""
	int prepareImageForOCR(Mat image);
	
	"""Set CPU/GPU"""
	void setProcessor(Processor p);

	"""Extracts text from image and stores as a string"""
	void recogniseTextUsingOCR(Mat img); 

	"""Returns string result of OCR"""
	string OCRToString();
}

class Processor {
	"""Displays the image in the specified window"""
	virtual void displayImageInWindow(Mat src) = 0;

	"""Applies affine transformation the src image contained in a Mat object given the angle of rotation"""
	virtual void rotateClockwise(Mat src, Mat &dst, double angle) = 0;
	
	"""Stores frames for averaging"""
	virtual bool storeFramesForAveraging(Mat src, int size, vector<Mat> &Tarray) = 0;

	"""Returns a Mat object with an image of a different resolution"""
	virtual void resizeImage(int width, int height) = 0;	

	"""Calculates and draws lines with hough transform"""
	virtual void applyHoughTransform(Mat src, Mat &dst, int threshold, unsigned int *nb, int thickness, double &Fangle, double acute) = 0;

	"""To calculate skew angle of text in image"""
	virtual int computeSkewTextInImage(const Mat src) = 0;

	"""Finds and stores large isolated blobs within an image"""
	virtual void findAndStoreBlobs(const cv::Mat &binary, std::vector<std::vector<cv::Point2i>> &blobs) = 0;

	"""Returns ratio of white content to black"""
	virtual double getWhiteContentRatio(Mat img) = 0;

	"""Fills the image with to contrast lines"""
	virtual void fillHolesWithSpecifiedColor(cv::Mat &input) = 0;
}


class CPUProcessor : public Processor {
	"""Displays the image in the specified window"""
	virtual void display(Mat src);

	"""Applies affine transformation the src image contained in a Mat object given the angle of rotation"""
	virtual void rotate(Mat src, Mat &dst, double angle);
	
	"""Stores frames for averaging"""
	virtual bool storeFramesForAveraging(Mat src, int size, vector<Mat> &Tarray);

	"""Returns a Mat object with an image of a different resolution"""
	virtual void resizeImage(int width, int height);	

	"""Calculates and draws lines with hough transform"""
	virtual void applyHoughTransform(Mat src, Mat &dst, int threshold, unsigned int *nb, int thickness, double &Fangle, double acute);

	"""To calculate the skew angle of text in an image"""
	virtual int computeSkewOfTextInImage(const Mat src);

	"""Finds and stores large isolated blobs within an image"""
	virtual void findAndStoreBlobs(const cv::Mat &binary, std::vector<std::vector<cv::Point2i>> &blobs);

	"""Returns ratio of white content to black"""
	virtual double getWhiteContentRatio(Mat img);

	"""Fills the image with to contrast lines"""
	virtual void fillHolesWithSpecifiedColor(cv::Mat &input);
}

class GPUProcessor : public Processor {
	"""Displays the image in the specified window"""
	virtual void displayImageInWindow(GpuMat src);

	"""Applies affine transformation the src image contained in a GpuMat object given the angle of rotation"""
	virtual void rotateClockwise(double angle);
	
	"""Stores frames for averaging"""
	virtual bool storeFramesForAveraging(GpuMat src, int size, vector<GpuMat> &Tarray);		

	"""Returns a GpuMat object with an image of a different resolution"""
	virtual void resizeImage(int width, int height);

	"""Calculates and draws lines with hough transform"""
	virtual void applyHoughTransform(GpuMat src, GpuMat &dst, int threshold, unsigned int *nb, int thickness, double &Fangle, double acute);

	"""To calculate the skew angle of text in an image"""
	virtual int computeSkewTextInImage(GpuMat src);
}

class Camera {
	"""Initiate identifiers"""
	Camera();

	"""Returns a Mat object of a frame captured from webcam and converts to colour space - Corresponds to process_main() in imgpros"""
	Mat getWebCamInput();
	
	"""Returns a Mat object of an image from a file"""
	Mat getImageFileInput();	

	"""Initialise webcam with frame width and height"""
	int initCameraFrameSize(int width, int height);
}

class Networks {
	"""Set the ACP header with given message"""
	string setACPHeaderWithMessage(string message);

	"""Create connection and test until one transmission succeeds"""
	createConnectionWithACP(char* defaultPort);

	"""Receive until peer closes connection"""
	receiveDataFromACP();

	"""Cleans up and closes connection"""
	closeConnection();
	
	"""Storing the recognized text from page to the database"""
	sendTextToACP(string message)
	
	"""To check if the data has been sent or not"""
	bool sendError()
}

class Main {
	
	/* 
	- obtain input
	- process image
	- store image in cache
	- check with prev image if exists if actually flipped
	- send to OCR
	
	- check page flip
	-   if yes, check against prev stored image
	-      if yes, delete prev stored image, repeat steps

	- check for ebook
	-   if exists, download page/book
	-	store in db 
	*/

	// Begin image processing thread
	Camera cam;
	cam.initCamera(640, 360);	

	Document doc = new Document();
	while(1) {
		// Get input from webcam or image file
		Mat image = cam.getWebCamInput(); 
		// Mat image = cam.getImageFileInput();

		bool isImageInput;

		Page page = new Page();
		
		// If using CPU
		page.setProcessor(new CPUProcessor(image));
		// Else if using GPU
		page.setProcessor(new GPUProcessor(image));

		doc.storeFlippedPage(page);

		Networks nwk = new Networks();

		page.resizeImage(cam.gHeight, cam.gWidth);
		page.prepareImageforOCR();
		page.rotateClockwise(90);

		if(imageIsFromCamera) {
			if(doc.hasFlipped(cam.image) || sendError()) {
				doc.deleteCache();
				page.OCR(cam.image);
				string text = page.OCRtoString();
				if(doc.EbookVersionExistOnline(text)) {  // TODO: refine the logic if the ebook has already been downloaded.
					book = doc.downloadEBook();
					text = extractTextFromEbook(page);
				} 
				sendTextToACP(text);
			}
		}		
	}
}
